import React, { useState, useMemo } from 'react';
import { getMIDINoteName } from '../constants';
export const SynthControlInteractiveDemo = ({ scales }) => {
    const [selectedScaleId, setSelectedScaleId] = useState(scales[0]?.id || '');
    const [baseNote, setBaseNote] = useState(36); // C2
    const selectedScale = useMemo(() => scales.find(s => s.id === selectedScaleId), [scales, selectedScaleId]);
    return (React.createElement("div", { className: "space-y-4 p-4 bg-gray-750 rounded-md" },
        React.createElement("p", { className: "text-gray-300" },
            "Simula c\u00F3mo se pueden cambiar los par\u00E1metros de un ",
            React.createElement("code", null, "SynthDef"),
            " en tiempo real usando ",
            React.createElement("code", null, "x.set()"),
            ". Aqu\u00ED puedes cambiar la escala (",
            React.createElement("code", null, "bufnum"),
            ") y la nota base de transposici\u00F3n (",
            React.createElement("code", null, "tnote"),
            ")."),
        React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4" },
            React.createElement("div", null,
                React.createElement("label", { htmlFor: "scale-select-synth", className: "block text-sm font-medium text-gray-300 mb-1" },
                    "Escala Actual (",
                    React.createElement("code", null, "bufnum"),
                    "):"),
                React.createElement("select", { id: "scale-select-synth", value: selectedScaleId, onChange: (e) => setSelectedScaleId(e.target.value), className: "w-full p-2 bg-gray-800 border border-gray-600 rounded-md text-gray-100 focus:ring-teal-500 focus:border-teal-500" }, scales.map(scale => (React.createElement("option", { key: scale.id, value: scale.id }, scale.name))))),
            React.createElement("div", null,
                React.createElement("label", { htmlFor: "base-note-synth", className: "block text-sm font-medium text-gray-300 mb-1" },
                    "Nota Base MIDI (",
                    React.createElement("code", null, "tnote"),
                    "): ",
                    getMIDINoteName(baseNote),
                    " (",
                    baseNote,
                    ")"),
                React.createElement("input", { type: "number", id: "base-note-synth", value: baseNote, onChange: (e) => setBaseNote(parseInt(e.target.value, 10)), min: "0", max: "127", className: "w-full p-2 bg-gray-800 border border-gray-600 rounded-md text-gray-100" }))),
        React.createElement("div", { className: "mt-4 bg-gray-800 p-4 rounded shadow" },
            React.createElement("h4", { className: "text-lg font-semibold text-teal-400" }, "Estado Simulado del Sintetizador:"),
            selectedScale && (React.createElement("p", { className: "text-gray-200 mt-2" },
                "El sintetizador est\u00E1 ahora configurado para usar la escala ",
                React.createElement("strong", { className: "text-sky-400" }, selectedScale.name),
                ' ',
                "(grados: ",
                React.createElement("code", { className: "text-xs bg-gray-700 p-1 rounded" },
                    "[",
                    selectedScale.degrees.join(', '),
                    "]"),
                ") con una nota base de transposici\u00F3n ",
                React.createElement("strong", { className: "text-pink-400" },
                    getMIDINoteName(baseNote),
                    " (MIDI ",
                    baseNote,
                    ")"),
                ".")),
            React.createElement("p", { className: "text-xs text-gray-400 mt-3" },
                "En SuperCollider, esto corresponder\u00EDa a:",
                React.createElement("br", null),
                React.createElement("code", null,
                    "x.set(\\bufnum, ~buffer_for_",
                    selectedScale?.name.replace(/\s+/g, ''),
                    ".bufnum);"),
                React.createElement("br", null),
                React.createElement("code", null,
                    "x.set(\\tnote, ",
                    baseNote,
                    ");"))),
        React.createElement("p", { className: "text-xs text-gray-400 mt-2" },
            "Imagina que el ",
            React.createElement("code", null, "SynthDef"),
            " (como ",
            React.createElement("code", null, "\\d2k_dynamic"),
            ") est\u00E1 reproduciendo continuamente una melod\u00EDa generativa. Al cambiar estos valores, la melod\u00EDa cambiar\u00EDa su tonalidad y/o transposici\u00F3n al instante.")));
};
